plugins {
	id 'java-library'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.moddev' version '1.0.14'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '2.+'
}

configurations {
	runtimeClasspath.extendsFrom localImplementation
	compileClasspath.extendsFrom localImplementation
}

version = (System.getenv("MOD_VERSION") ?: "0.0.0-local") + "-${minecraft_version}"
group = mod_group_id
base {
	archivesName = artifact_name
}

logger.lifecycle("${mod_name} version ${version}")

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		name "Modmaven"
		url "https://modmaven.dev"
		content {
			// GrandPower
			includeGroup "dev.technici4n"
			// Modern Industrialization
			includeGroup "aztech"
			// Tesseract
			includeGroup "net.swedz"
		}
	}
	maven {
		name = "shedaniel"
		url "https://maven.shedaniel.me"
		content {
			includeGroup "me.shedaniel.cloth"
		}
	}
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/releases/"
		content {
			// EMI
			includeGroup "dev.emi"
		}
	}
	maven {
		name = "Wisp Forest"
		url = "https://maven.wispforest.io/releases"
		// Accessories
	}
	maven {
		name = "Su5eD"
		url = "https://maven.su5ed.dev/releases"
		content {
			// Forgified Fabric API - Required by Accessories
			includeGroup "org.sinytra.forgified-fabric-api"
		}
	}
	maven {
		name = "OctoStudios"
		url = "https://maven.octo-studios.com/releases"
		content {
			// Curios
			includeGroup "top.theillusivec4.curios"
		}
	}
}

dependencies {
	implementation "aztech:Modern-Industrialization:${modern_industrialization_version}"

	implementation "dev.technici4n:GrandPower:${grandpower_version}"

	implementation "me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}"

	if (project.runtime_include_emi.toBoolean()) {
		localImplementation "dev.emi:emi-neoforge:${emi_version}"
	} else {
		compileOnly "dev.emi:emi-neoforge:${emi_version}"
	}

	implementation "net.swedz:tesseract-neoforge:${tesseract_version}"

	if (project.runtime_include_mi_tweaks.toBoolean()) {
		localImplementation "net.swedz:mi-tweaks:${mi_tweaks_version}"
	} else {
		compileOnly "net.swedz:mi-tweaks:${mi_tweaks_version}"
	}

	jarJar(implementation("io.github.llamalad7:mixinextras-neoforge:${mixinextras_version}")) {
		version {
			strictly "[${mixinextras_version},)"
			prefer mixinextras_version
		}
	}

	if (project.runtime_include_accessories.toBoolean()) {
		localImplementation "io.wispforest:accessories-neoforge:${accessories_version}"
	} else {
		compileOnly "io.wispforest:accessories-neoforge:${accessories_version}"
	}

	if (project.runtime_include_curios.toBoolean()) {
		localImplementation "top.theillusivec4.curios:curios-neoforge:${curios_version}"
	} else {
		compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}"
	}
}

tasks.named('jar') {
	from "LICENSE"
}

task sourceJar(type: Jar) {
	archiveClassifier.set("sources")
	from sourceSets.main.allJava
	from "LICENSE"
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			from components.java
			artifactId = project.artifact_name

			artifact(sourceJar) {
				classifier "sources"
			}
		}
	}

	repositories {
		mavenLocal()

		maven {
			credentials {
				username = System.getenv("MODMAVEN_USERNAME")
				password = System.getenv("MODMAVEN_PASSWORD")
			}
			name = "modmaven"
			url = "https://modmaven.dev/artifactory/local-releases/"
		}
	}
}

if (System.getenv("CURSEFORGE_API_KEY")) {
	curseforge {
		apiKey = System.getenv("CURSEFORGE_API_KEY")

		project {
			id = project.curseforge_project
			releaseType = System.getenv("RELEASE_TYPE")
			changelogType = "markdown"
			delegate.changelog = System.getenv("MOD_CHANGELOG_TRIMMED_PUBLISH")

			def compatible_minecraft_versions = project.compatible_minecraft_versions.split(",")
			compatible_minecraft_versions.each { addGameVersion it }
			addGameVersion "NeoForge"
			addGameVersion "Java 21"

			relations {
				requiredDependency "modern-industrialization"
				requiredDependency "tesseract-api-neoforge"
			}

			mainArtifact(tasks.named("jar").flatMap { it.archiveFile })
		}

		options {
			forgeGradleIntegration = false
		}
	}
}

if (System.getenv("MODRINTH_API_KEY")) {
	modrinth {
		token = System.getenv("MODRINTH_API_KEY")

		projectId = project.modrinth_project
		versionNumber = "${version}"
		versionName = "${project.mod_name} ${version}"
		versionType = System.getenv("RELEASE_TYPE")
		delegate.changelog = System.getenv("MOD_CHANGELOG_TRIMMED_PUBLISH")

		gameVersions = project.compatible_minecraft_versions.split(",").collect { it }
		loaders = ["neoforge"]

		dependencies {
			required.project "modern-industrialization"
			required.project "tesseract-api"
		}

		uploadFile = tasks.jar
	}
}

neoForge {
	version = neoforge_version

	mods {
		"${mod_id}" {
			sourceSet sourceSets.main
		}
	}

	validateAccessTransformers = true
	accessTransformers = [
			"src/main/resources/${mod_id}.accesstransformer.cfg"
	]

	parchment {
		mappingsVersion = project.parchment_mappings_version
		minecraftVersion = project.parchment_mappings_minecraft_version
	}

	runs {
		configureEach {
			mods = [neoForge.mods."${mod_id}"]

			systemProperty 'forge.logging.markers', 'REGISTRIES'

			systemProperty 'forge.logging.console.level', 'debug'

			sourceSet = project.sourceSets.main
		}

		client {
			client()

			gameDirectory.set(project.getLayout().getProjectDirectory().dir('runs/client'))

			programArguments.addAll '--username', 'Swedz', '--uuid', 'a2dca537-693e-4ded-ac4b-c4006dd4d382'

			systemProperty 'forge.enabledGameTestNamespaces', project.mod_id

			systemProperty 'mixin.env.remapRefMap', 'true'
			systemProperty 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
			systemProperty 'mixin.debug.export', 'true'
			systemProperty 'mixin.debug.verbose', 'true'
		}

		server {
			server()

			gameDirectory.set(project.getLayout().getProjectDirectory().dir('runs/server'))

			systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
			programArgument '--nogui'
		}

		data {
			data()

			gameDirectory.set(project.getLayout().getProjectDirectory().dir('runs/data'))

			programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()

			systemProperty 'mixin.env.remapRefMap', 'true'
			systemProperty 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
			systemProperty 'mixin.debug.export', 'true'
			systemProperty 'mixin.debug.verbose', 'true'
		}
	}
}

tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
			minecraft_version                     : minecraft_version,
			minecraft_version_range               : minecraft_version_range,
			neoforge_version                      : neoforge_version,
			neoforge_version_range                : neoforge_version_range,
			loader_version_range                  : loader_version_range,
			mod_id                                : mod_id,
			mod_name                              : mod_name,
			mod_version                           : version,
			mod_authors                           : mod_authors,
			mod_description                       : mod_description,
			mod_github                            : mod_github,
			modern_industrialization_version_range: modern_industrialization_version_range,
			tesseract_version_range               : tesseract_version_range,
			mi_tweaks_version_range               : mi_tweaks_version_range,
			emi_version_range                     : emi_version_range,
			accessories_version_range             : accessories_version_range,
			curios_version_range                  : curios_version_range
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand replaceProperties
	}
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets.main.resources { srcDir 'src/generated/resources' }

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}

processResources {
	duplicatesStrategy = 'exclude'

	exclude(".cache")
}